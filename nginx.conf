events {}

http {
    lua_shared_dict my_cache 10m;

    server {
        listen 80;

        lua_need_request_body on;

        location / {
            access_by_lua_block {
                local cjson = require "cjson"
                ngx.req.read_body()
                local body = ngx.req.get_body_data()

                -- headers
                local headers = ngx.req.get_headers()

                -- prefer real client IP
                local real_ip = headers["x-forwarded-for"] or headers["x-real-ip"] or ngx.var.remote_addr

                local log = {
                    time = ngx.localtime(),
                    remote_addr = real_ip,
                    method = ngx.req.get_method(),
                    path = ngx.var.uri,
                    query = ngx.var.args,
                    status = ngx.var.status,
                    headers = headers,
                    body = body
                }

                local ok, json = pcall(cjson.encode, log)
                if ok and json then
                    local f, err = io.open("/var/log/nginx/access.log", "a+")
                    if f then
                        f:write(json .. "\n")
                        f:close()
                    else
                        ngx.log(ngx.ERR, "Lua failed to open access.log: ", err)
                    end
                else
                    ngx.log(ngx.ERR, "Lua failed to encode JSON")
                end
            }

            proxy_pass http://host.docker.internal:3000;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
        }
    }
}
